diff --git a/compositor/main.c b/compositor/main.c
index 1e827884..2f6e9d0b 100644
--- a/compositor/main.c
+++ b/compositor/main.c
@@ -560,6 +560,16 @@ static int on_term_signal(int signal_number, void *data)
 	return 1;
 }
 
+static void
+block_signal( int signal_number )
+{
+	sigset_t ss;
+
+	sigemptyset( &ss );
+	sigaddset( &ss, signal_number );
+	pthread_sigmask( SIG_BLOCK, &ss, NULL );
+}
+
 static const char *
 clock_name(clockid_t clk_id)
 {
@@ -1781,6 +1791,17 @@ int main(int argc, char *argv[])
 				       &require_input, true);
 	ec->require_input = require_input;
 
+	/*
+	 * Block sigusr1 in case xwayland is to be loaded. That way,
+	 * any thread called by an external library or within the
+	 * compositor does not terminate the entire session.
+	 */
+	if (!xwayland)
+		weston_config_section_get_bool(section, "xwayland", &xwayland,
+					       false);
+	if ( xwayland )
+		block_signal( SIGUSR1 );
+
 	if (load_backend(ec, backend, &argc, argv, config) < 0) {
 		weston_log("fatal: failed to create compositor backend\n");
 		goto out;
diff --git a/compositor/xwayland.c b/compositor/xwayland.c
index 9881cd9c..9620b509 100644
--- a/compositor/xwayland.c
+++ b/compositor/xwayland.c
@@ -28,6 +28,8 @@
 
 #include <signal.h>
 #include <sys/socket.h>
+#include <unistd.h>
+#include <pthread.h>
 
 #include "compositor.h"
 #include "compositor/weston.h"
@@ -45,19 +47,45 @@ struct wet_xwayland {
 };
 
 static int
-handle_sigusr1(int signal_number, void *data)
+handle_sigusr1(int fd, unsigned int mask, void *data)
 {
 	struct wet_xwayland *wxw = data;
+	pid_t pid;
 
-	/* We'd be safer if we actually had the struct
-	 * signalfd_siginfo from the signalfd data and could verify
-	 * this came from Xwayland.*/
-	wxw->api->xserver_loaded(wxw->xwayland, wxw->client, wxw->wm_fd);
-	wl_event_source_remove(wxw->sigusr1_source);
+	if ( read(fd, &(pid), sizeof(pid_t)) == sizeof(pid_t)
+             && wxw->process.pid == pid ) {
+		wxw->api->xserver_loaded(wxw->xwayland, wxw->client, wxw->wm_fd);
+		wl_event_source_remove( wxw->sigusr1_source );
+		close( fd );
+	}
 
 	return 1;
 }
 
+static void*
+recieve_sigusr1(void *data) {
+	struct wet_xwayland *wxw = *((struct wet_xwayland **)data + 1);
+	int fd = *((int *)data);
+	sigset_t ss;
+	siginfo_t si;
+
+	free(data);
+	data = NULL;
+
+	sigemptyset( &ss );
+	sigaddset( &ss, SIGUSR1 );
+
+	do {
+		sigwaitinfo( &ss, &si );
+	} while( wxw->process.pid != si.si_pid );
+
+	while ( write( fd, &(si.si_pid), sizeof(pid_t) ) != sizeof(pid_t) );
+
+	close( fd );
+
+	pthread_exit(NULL);
+}
+
 static pid_t
 spawn_xserver(void *user_data, const char *display, int abstract_fd, int unix_fd)
 {
@@ -174,6 +202,9 @@ wet_load_xwayland(struct weston_compositor *comp)
 	struct weston_xwayland *xwayland;
 	struct wet_xwayland *wxw;
 	struct wl_event_loop *loop;
+	pthread_t sig_reciever;
+	int sigusr1_fifo[2];
+	void *sigusr1_data;
 
 	if (weston_compositor_load_xwayland(comp) < 0)
 		return -1;
@@ -201,9 +232,33 @@ wet_load_xwayland(struct weston_compositor *comp)
 	if (api->listen(xwayland, wxw, spawn_xserver) < 0)
 		return -1;
 
-	loop = wl_display_get_event_loop(comp->wl_display);
-	wxw->sigusr1_source = wl_event_loop_add_signal(loop, SIGUSR1,
-						       handle_sigusr1, wxw);
+	if ( (sigusr1_data = malloc( 2 * sizeof(void *) )) == NULL )
+		return -1;
+
+	loop = wl_display_get_event_loop(wxw->compositor->wl_display);
+
+	if ( pipe(sigusr1_fifo) != 0 ) {
+		free(sigusr1_data);
+		return -1;
+	}
+
+	wxw->sigusr1_source = wl_event_loop_add_fd(loop, sigusr1_fifo[0],
+                                                   WL_EVENT_READABLE,
+                                                   handle_sigusr1, wxw);
+
+	*((int *) sigusr1_data) = sigusr1_fifo[1];
+	*((struct wet_xwayland **) sigusr1_data + 1) = wxw;
+	if ( pthread_create(&sig_reciever, NULL, recieve_sigusr1, sigusr1_data) != 0 )
+	{
+		weston_log("Failed to spawn xwayland signal reciever.\n");
+		free( sigusr1_data );
+		sigusr1_data = NULL;
+		close(sigusr1_fifo[0]);
+		close(sigusr1_fifo[1]);
+		wl_event_source_remove( wxw->sigusr1_source );
+	}
+	else
+		pthread_detach( sig_reciever );
 
 	return 0;
 }
diff --git a/libweston/vaapi-recorder.c b/libweston/vaapi-recorder.c
index 1228f7d1..a6dd2fba 100644
--- a/libweston/vaapi-recorder.c
+++ b/libweston/vaapi-recorder.c
@@ -36,6 +36,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#include <signal.h>
 
 #include <pthread.h>
 
@@ -900,6 +901,12 @@ vpp_destroy(struct vaapi_recorder *r)
 static int
 setup_worker_thread(struct vaapi_recorder *r)
 {
+	sigset_t ss;
+
+	sigemptyset(&ss);
+	sigaddset(&ss, SIGUSR1);
+	pthread_sigmask(SIG_BLOCK, &ss, NULL);
+
 	pthread_mutex_init(&r->mutex, NULL);
 	pthread_cond_init(&r->input_cond, NULL);
 	pthread_create(&r->worker_thread, NULL, worker_thread_function, r);
